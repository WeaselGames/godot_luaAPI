<?xml version="1.0" encoding="UTF-8" ?>
<class name="LuaCoroutine" inherits="RefCounted" version="4.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		A coroutine.
	</brief_description>
	<description>
		Binds to a existing Lua object and creates a new lua coroutine with lua_newthread. This is not a typical thread but a coroutine. Instead of executing a file or string directly you load it into the state. Every time the resume method is called the lua code will execute until yield is called from lua.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="yield_await">
			<return type="Signal" />
			<param index="0" name="args" type="Array" />
			<description>
				Allows a GDScript function being called by a LuaCoroutine to await. It yields the lua state and passes any args to LuaCoroutine.resume()
			</description>
		</method>
		<method name="yield_state">
			<return type="LuaError" />
			<param index="0" name="args" type="Array" />
			<description>
				Must be called from a lua hook. Will yield the lua state and pass arguments to `resume()`. Can be destructive.
			</description>
		</method>
		<method name="bind">
			<return type="void" />
			<param index="0" name="Lua" type="LuaAPI" />
			<description>
				Binds the coroutine to a lua object. All coroutines attached to the same object share resources.
			</description>
		</method>
		<method name="load_file">
			<return type="LuaError" />
			<param index="0" name="FilePath" type="String" />
			<description>
				Loads a file into the coroutines state.
			</description>
		</method>
		<method name="load_string">
			<return type="LuaError" />
			<param index="0" name="Code" type="String" />
			<description>
				Loads a string into the coroutines state.
			</description>
		</method>
		<method name="resume">
			<return type="Variant" />
			<param index="0" name="Args" type="Array" />
			<description>
				Resumes or starts the coroutine. Will either return a Array of arguments passed by lua in yield() or a LuaError. Arguments are passed to yield() in lua. This is a blocking call, it will not return until the coroutine has yielded or finished.
			</description>
		</method>
		<method name="is_done">
			<return type="bool" />
			<description>
				Returns true if the coroutine is finished executing.
			</description>
		</method>
		<method name="function_exists">
			<return type="bool" />
			<param index="0" name="LuaFunctionName" type="String" />
			<description>
				Returns [code]true[/code] only if [code]LuaFunctionName[/code] is defined in current Lua's state as a function.
			</description>
		</method>
		<method name="call_function">
			<return type="Variant" />
			<param index="0" name="LuaFunctionName" type="String" />
			<param index="1" name="Args" type="Array" />
			<description>
				Calls a function inside current Lua state. This can be either a exposed function or a function defined with with lua. You may want to check if the function actually exists with [code]function_exists(LuaFunctionName)[/code]. This function supports 1 return value from lua. It will be returned as a variant and if lua returns no value it will be null.
			</description>
		</method>
		<method name="pull_variant">
			<return type="Variant" />
			<param index="0" name="Name" type="String" />
			<description>
				Will pull a copy of a global Variant from lua.
			</description>
		</method>
		<method name="push_variant">
			<return type="LuaError" />
			<param index="0" name="Name" type="String" />
			<param index="1" name="var" type="Variant" />
			<description>
				Will push a copy of a Variant to lua as a global. Returns a error if the type is not supported.
			</description>
		</method>
		<method name="get_registry_value">
			<return type="Variant" />
			<param index="0" name="Name" type="String" />
			<description>
				Will pull a copy of a Variant from lua's registry table.
			</description>
		</method>
		<method name="set_registry_value">
			<return type="LuaError" />
			<param index="0" name="Name" type="String" />
			<param index="1" name="var" type="Variant" />
			<description>
				Will push a copy of a Variant to lua's registry table. Returns a error if the type is not supported.
			</description>
		</method>
		<method name="set_hook">
			<return type="void" />
			<param index="0" name="hook" type="Callable" />
			<param index="1" name="mask" type="int" />
			<param index="1" name="count" type="int" />
			<description>
				Sets the hook for the state. The hook will be called on the events specified by the mask. The count specifies how many instructions should be executed before the hook is called. If count is 0, the hook will be called on every instruction. The hook will be called with the following arguments: [code]hook(parent, event, line)[/code]. The parent is the LuaAPI object that owns the current state.
			</description>
		</method>
	</methods>
</class>
