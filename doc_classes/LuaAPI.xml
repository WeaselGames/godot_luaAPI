<?xml version="1.0" encoding="UTF-8" ?>
<class name="LuaAPI" inherits="RefCounted" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Execute Lua code at runtime and make your own API.
	</brief_description>
	<description>
		This class represents a lua state and allows you to interact with lua at runtime. You can load files and strings code. Push Callable's as lua functions. And push any Variant as a lua variable.
	<tutorials>
	</tutorials>
	<methods>
		<method name="new_coroutine">
			<return type="LuaCoroutine" />
			<description>
				This method will create a coroutine that is already bound to this runtime.
			</description>
		</method>
		<method name="get_running_coroutine">
			<return type="LuaCoroutine" />
			<description>
				Intended to be called from a lua hook. Returns the current running coroutine.
			</description>
		</method>
		<method name="bind_libraries">
			<return type="void" />
			<param index="0" name="Array" type="Array" />
			<description>
				Bind lua libraries.
			</description>
		</method>
		<method name="do_file">
			<return type="LuaError" />
			<param index="0" name="FilePath" type="String" />
			<description>
				Loads a file with luaL_loadfile() passing its absolute path.
			</description>
		</method>
		<method name="do_string">
			<return type="LuaError" />
			<param index="0" name="Code" type="String" />
			<description>
				Loads a string with luaL_loadstring() and executes the top of the stack. Returns any errors.
			</description>
		</method>
		<method name="expose_constructor">
			<return type="LuaError" />
			<param index="0" name="LuaConstructorName" type="String" />
			<param index="1" name="Object" type="Object" />
			<description>
				Accepts any object that has a new() method. Allows lua to call the constructor aka the new() method. Exposed as a global with the given name.
			</description>
		</method>
		<method name="function_exists">
			<return type="bool" />
			<param index="0" name="LuaFunctionName" type="String" />
			<description>
				Returns [code]true[/code] only if [code]LuaFunctionName[/code] is defined in current Lua's state as a function.
			</description>
		</method>
		<method name="call_function">
			<return type="Variant" />
			<param index="0" name="LuaFunctionName" type="String" />
			<param index="1" name="Args" type="Array" />
			<description>
				Calls a function inside current Lua state. This can be either a exposed function or a function defined with with Lua. You may want to check if the function actually exists with [code]function_exists(LuaFunctionName)[/code]. This function supports 1 return value from lua. It will be returned as a variant and if Lua returns no value it will be null. If an error occurs while calling this function, a LuaError object will be returned.
			</description>
		</method>
		<method name="pull_variant">
			<return type="Variant" />
			<param index="0" name="Name" type="String" />
			<description>
				Will pull a copy of a global Variant from lua.
			</description>
		</method>
		<method name="push_variant">
			<return type="LuaError" />
			<param index="0" name="Name" type="String" />
			<param index="1" name="var" type="Variant" />
			<description>
				Will push a copy of a Variant to lua as a global. Returns a error if the type is not supported.
			</description>
		</method>
		<method name="set_hook">
			<return type="void" />
			<param index="0" name="hook" type="Callable" />
			<param index="1" name="mask" type="int" />
			<param index="1" name="count" type="int" />
			<description>
				Sets the hook for the state. The hook will be called on the events specified by the mask. The count specifies how many instructions should be executed before the hook is called. If count is 0, the hook will be called on every instruction. The hook will be called with the following arguments: [code]hook(parent, event, line)[/code]. The parent is the LuaAPI object that owns the current state.
			</description>
		</method>
	</methods>
	<members>
		<member name="permissive" type="bool" setter="set_permissive" getter="get_permissive" default="false">
			Set weather an objects lua_fields method should be treated as a blacklist instead of a whitelist.
		</member>
	</members>
	<constants>
		<constant name="HOOK_MASK_CALL" value="1" enum="HookMask">
			Specifies on which events the hook will be called.
		</constant>
		<constant name="HOOK_MASK_RETURN" value="2" enum="HookMask">
			Specifies on which events the hook will be called.
		</constant>
		<constant name="HOOK_MASK_LINE" value="4" enum="HookMask">
			Specifies on which events the hook will be called.
		</constant>
		<constant name="HOOK_MASK_COUNT" value="8" enum="HookMask">
			Specifies on which events the hook will be called.
		</constant>
	</constants>
</class>
