<?xml version="1.0" encoding="UTF-8" ?>
<class name="LuaAPI" inherits="RefCounted" version="4.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Execute Lua code at runtime and make your own API.
	</brief_description>
	<description>
		This class represents a lua state and allows you to interact with lua at runtime. You can load files and strings code. Push Callable's as lua functions. And push any Variant as a lua variable.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="new_coroutine">
			<return type="LuaCoroutine" />
			<description>
				This method will create a coroutine that is already bound to this runtime.
			</description>
		</method>
		<method name="get_running_coroutine">
			<return type="LuaCoroutine" />
			<description>
				Intended to be called from a lua hook. Returns the current running coroutine.
			</description>
		</method>
		<method name="bind_libraries">
			<return type="LuaError" />
			<param index="0" name="Array" type="Array" />
			<description>
				Bind lua libraries to the LuaAPI Object. 
				Returns an error if a library fails to bind.
				Note: in C#, the param Array must be a [code]Godot.Collections.Array[/code] and not a [code]System.Array[/code] class.
			</description>
		</method>
		<method name="do_file">
			<return type="LuaError" />
			<param index="0" name="FilePath" type="String" />
			<description>
				Loads a file with luaL_loadfile() passing its absolute path.
				Similar to [code].DoString()[/code], this function loads a lua file into the LuaAPI Object and executes it as Lua. [code]FilePath[/code] must be an absolute path, and must exist or an error is reutrned.
			</description>
		</method>
		<method name="do_string">
			<return type="LuaError" />
			<param index="0" name="Code" type="String" />
			<description>
				Loads a string with luaL_loadstring() and executes the top of the stack. Returns any errors.
				Use [code].DoString()[/code] to execute a lua script or snippet stored within a string variable or a string literal.
			</description>
		</method>
		<method name="function_exists">
			<return type="bool" />
			<param index="0" name="LuaFunctionName" type="String" />
			<description>
				Returns [code]true[/code] only if [code]LuaFunctionName[/code] is defined in the global environment table as a function.
			</description>
		</method>
		<method name="call_function">
			<return type="Variant" />
			<param index="0" name="LuaFunctionName" type="String" />
			<param index="1" name="Args" type="Array" />
			<description>
				Calls a function inside current Lua state. This can be either a exposed function or a function defined with with Lua. You may want to check if the function actually exists with [code]function_exists(LuaFunctionName)[/code]. This function supports 1 return value from lua. It will be returned as a variant and if Lua returns no value it will be null. If an error occurs while calling this function, a LuaError object will be returned.
			</description>
		</method>
		<method name="call_function_ref">
			<return type="Variant" />
			<param index="0" name="Args" type="Array" />
			<param index="1" name="LuaFunctionRef" type="int" />
			<description>
				This method is used to create a Callable when pulling a lua function from the stack. It is not intended to be called directly.
				When returning a Callable, the function ref is bound to the Callable. You must only supply the arguments.
			</description>
		</method>
		<method name="pull_variant">
			<return type="Variant" />
			<param index="0" name="Name" type="String" />
			<description>
				Will pull a copy of a global Variant from lua.
			</description>
		</method>
		<method name="push_variant">
			<return type="LuaError" />
			<param index="0" name="Name" type="String" />
			<param index="1" name="var" type="Variant" />
			<description>
				Will push a copy of a Variant to lua as a global. Returns a error if the type is not supported.
				Using [code].PushVariant[/code] in C# to push a function requires wrapping the Method in a [code]Callable[/code] first. In GDScript the wrapper is not needed. 
			</description>
		</method>
		<method name="get_registry_value">
			<return type="Variant" />
			<param index="0" name="Name" type="String" />
			<description>
				Will pull a copy of a Variant from lua's registry table.
			</description>
		</method>
		<method name="set_registry_value">
			<return type="LuaError" />
			<param index="0" name="Name" type="String" />
			<param index="1" name="var" type="Variant" />
			<description>
				Will push a copy of a Variant to lua's registry table. Returns a error if the type is not supported.
			</description>
		</method>
		<method name="set_hook">
			<return type="void" />
			<param index="0" name="hook" type="Callable" />
			<param index="1" name="mask" type="int" />
			<param index="1" name="count" type="int" />
			<description>
				Sets the hook for the state. The hook will be called on the events specified by the mask. The count specifies how many instructions should be executed before the hook is called. If count is 0, the hook will be called on every instruction. The hook will be called with the following arguments: [code]hook(parent, event, line)[/code]. The parent is the LuaAPI object that owns the current state.
			</description>
		</method>
		<method name="configure_gc">
			<return type="int" />
			<param index="0" name="option" type="int" />
			<param index="1" name="data" type="int" />
			<description>
				Controls the garbage collector. The option can be one of the following: [code]GC_STOP[/code], [code]GC_RESTART[/code], [code]GC_COLLECT[/code], [code]GC_COUNT[/code], [code]GC_STEP[/code], [code]GC_SETPAUSE[/code], [code]GC_SETSTEPMUL[/code]. The data is the argument for the option. Returns the result of the option.
			</description>
		</method>
		<method name="get_memory_usage">
			<return type="int" />
			<description>
				Returns the current memory usage of the state in bytes.
			</description>
		</method>
	</methods>
	<members>
		<member name="object_metatable" type="LuaObjectMetatable" setter="set_object_metatable" getter="get_object_metatable" default="LuaDefaultObjectMetatable">
			This is the default LuaMetatable to use for object which do not define a lua_metatable field. By default it is a LuaDefaultObjectMetatable. You can change this to a custom metatable to change the behavior of all objects.
		</member>
		<member name="memory_limit" type="int" setter="set_memory_limit" getter="get_memory_limit" default="0">
			Sets the memory limit for the state in bytes. If the limit is 0, there is no limit.
		</member>
		<member name="use_callables" type="bool" setter="set_use_callables" getter="get_use_callables" default="true">
			When true, Lua functions passed to Godot will use the LuaCallable type. This type is a CallableCustom which has issues currently with GDExtension and C#
			When false, Lua functions passed to Godot will use the LuaFunctionRef type. This type is a RefCounted which behaves the same as a LuaCallable. But uses Inoke instead of Call.
	</members>
	<constants>
		<constant name="GC_STOP" value="1" enum="HookMask">
			Specifies on which events the hook will be called.
		</constant>
		<constant name="HOOK_MASK_RETURN" value="2" enum="HookMask">
			Specifies on which events the hook will be called.
		</constant>
		<constant name="HOOK_MASK_LINE" value="4" enum="HookMask">
			Specifies on which events the hook will be called.
		</constant>
		<constant name="HOOK_MASK_COUNT" value="8" enum="HookMask">
			Specifies on which events the hook will be called.
		</constant>

		<constant name="GC_STOP" value="0" enum="GCOption">
			Stops the garbage collector.
		</constant>
		<constant name="GC_RESTART" value="1" enum="GCOption">
			Restarts the garbage collector.
		</constant>
		<constant name="GC_COLLECT" value="2" enum="GCOption">
			Performs a full garbage-collection cycle.
		</constant>
		<constant name="GC_COUNT" value="3" enum="GCOption">
			Returns the current amount of memory (in Kbytes) in use by Lua.
		</constant>
		<constant name="GC_COUNTB" value="4" enum="GCOption">
			Returns the remainder of dividing the current amount of bytes of memory in use by Lua by 1024.
		</constant>
		<constant name="GC_STEP" value="5" enum="GCOption">
			Performs an incremental step of garbage collection.
		</constant>
		<constant name="GC_SETPAUSE" value="6" enum="GCOption">
			Sets [code]data[/code] as the new value for the pause of the collector.
		</constant>
		<constant name="GC_SETSTEPMUL" value="7" enum="GCOption">
			Sets [code]data[/code] as the new value for the step multiplier of the collector.
		</constant>
	</constants>
</class>
