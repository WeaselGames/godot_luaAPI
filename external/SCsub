Import('env')
Import('env_lua')

import sys
import os
import platform

def run(cmd):
    print("Running: %s" % cmd)
    res = os.system(cmd)
    code = 0
    if (os.name == 'nt'):
        code = res
    else:
        code = os.WEXITSTATUS(res)
    if code != 0:
        print("Error: return code: " + str(code))
        sys.exit(code)

def build_luajit():
    if not env_lua.msvc:
        os.chdir("luaJIT")
        # cross compile linux->windows
        if env['PLATFORM'] == 'posix' and env['platform'] == 'windows':
            host_arch = platform.machine()
            run("make clean")
            if (host_arch != env['arch']):
                if (host_arch == 'x86_64' and env['arch'] == 'x86_32'):
                    host_cc = env['luaapi_host_cc'] + ' -m32'
                    run('make HOST_CC="%s" CROSS="%s" BUILDMODE="static" TARGET_SYS=Windows' % (host_cc, env['CC'].replace("-gcc", "-").replace("-clang", "-")))

                else:
                    print("ERROR: Unsupported cross compile!")
                    sys.exit(-1)
            else:
                run('make HOST_CC="%s" CROSS="%s" BUILDMODE="static" TARGET_SYS=Windows' % (env['luaapi_host_cc'], env['CC'].replace("-gcc", "-").replace("-clang", "-")))

        elif env['platform']=='macos':
            run("make clean MACOSX_DEPLOYMENT_TARGET=10.12")
            run('make CC="%s" TARGET_FLAGS="-arch %s" MACOSX_DEPLOYMENT_TARGET=10.12' % (env['CC'], env['arch']))

        elif env['platform']=='linuxbsd':
            host_arch = platform.machine()
            run("make clean")
            if (host_arch != env['arch']):
                if (host_arch == 'x86_64' and env['arch'] == 'x86_32'):
                    host_cc = env['luaapi_host_cc'] + ' -m32'
                    run('make HOST_CC="%s" CROSS="%s" BUILDMODE="static"' % (host_cc, env['CC'].replace("-gcc", "-").replace("-clang", "-")))

                else:
                    print("ERROR: Unsupported cross compile!")
                    sys.exit(-1)

            else:
                run('make CC="%s" BUILDMODE="static"' % env['CC'])

        else:
            print("ERROR: Unsupported platform '%s'." % env['platform'])
            sys.exit(-1)
    else:
        os.chdir("luaJIT/src")
        run("msvcbuild static")

luaver = env["luaapi_luaver"]

if luaver == "jit":
    if env["luaapi_luajit_build"]:
        build_luajit()
    if env_lua.msvc:
        # hack for msvc builds. See https://github.com/godotengine/godot/issues/23687
        env.Append(LIBS=[File('luaJIT/src/luajit.lib')])
        env.Append(LIBS=[File('luaJIT/src/lua51.lib')])
    else:
        env.Append(LIBPATH=[Dir("luaJIT/src").abspath])
        env.Append(LIBS=['libluajit'])
    env_lua.Append(CPPPATH=[Dir('luaJIT/src').abspath])

elif luaver == "5.1":
    env_lua.Append(CPPDEFINES='MAKE_LIB')

    if env['PLATFORM'] == 'posix' and (env['platform'] == 'linux' or env['platform'] == 'linuxbsd'):
        env_lua.Append(CPPDEFINES='LUA_USE_POSIX')
    elif env['platform'] == 'ios':
        env_lua.Append(CPPDEFINES=['LUA_USE_IOS'])

    if not env_lua.msvc:
        env_lua['CFLAGS'].remove('-std=gnu11')
        env_lua.Append(CFLAGS=['-std=c99'])

    env_lua.Append(CPPPATH=[Dir('lua51').abspath])
    env_lua.add_source_files(env.modules_sources,'lua51/*.c')

else:
    env_lua.Append(CPPDEFINES='MAKE_LIB')

    if env['PLATFORM'] == 'posix' and (env['platform'] == 'linux' or env['platform'] == 'linuxbsd'):
        env_lua.Append(CPPDEFINES='LUA_USE_POSIX')
    elif env['platform'] == 'ios':
        env_lua.Append(CPPDEFINES=['LUA_USE_IOS'])

    if not env_lua.msvc:
        env_lua['CFLAGS'].remove('-std=gnu11')
        env_lua.Append(CFLAGS=['-std=c99'])

    env_lua.Append(CPPPATH=[Dir('lua').abspath])
    env_lua.add_source_files(env.modules_sources, 'lua/onelua.c')

