
Import('env')
Import('env_lua')

import sys
import os
import platform
import SCons.Script

def run(cmd):
    res = os.system(cmd)
    code = 0
    if (os.name == 'nt'):
        code = res
    else:
        code = os.WEXITSTATUS(res)
    if code != 0:
        print("Error: return code: " + str(code))
        if SCons.Script.keep_going_on_error == 0:
            sys.exit(code)

def build_luajit():
    if not env_lua.msvc:
        os.chdir("luaJIT")
        # cross compile linux->windows
        if env['PLATFORM'] == 'posix' and env['platform'] == 'windows':
            run("make clean")
            run('make HOST_CC="%s" CROSS="%s" TARGET_SYS=Windows BUILDMODE="static"' % (env['luaapi_host_cc'], env['CC'].replace("gcc", "")))
        elif env['platform']=='macos':
            run("make clean MACOSX_DEPLOYMENT_TARGET=10.12")
            run('make CC="%s" BUILDMODE="static" MACOSX_DEPLOYMENT_TARGET=10.12' % env['CC'])
        else:
            run("make clean")
            run('make CC="%s" BUILDMODE="static"' % env['CC'])
    else:
        os.chdir("luaJIT/src")
        run("msvcbuild static")

env_lua = env_lua.Clone()

if env["luaapi_luajit"]:
    if env["luaapi_luajit_build"]:
        build_luajit()
    if env_lua.msvc:
        # hack for msvc builds. See https://github.com/godotengine/godot/issues/23687
        env.Append(LIBS=[File('luaJIT/src/luajit.lib')])
        env.Append(LIBS=[File('luaJIT/src/lua51.lib')])
    else:
        env.Append(LIBPATH=[Dir("luaJIT/src").abspath])
        env.Append(LIBS=['libluajit'])
    
else:
    env_lua.Append(CPPDEFINES='MAKE_LIB')

    if env['PLATFORM'] == 'posix' and env['platform'] == 'linuxbsd':
        env_lua.Append(CPPDEFINES='LUA_USE_POSIX')

    if not env_lua.msvc:
        env_lua['CFLAGS'].remove('-std=gnu11')
        env_lua.Append(CFLAGS=['-std=c99'])

    env_lua.add_source_files(env.modules_sources,'lua/onelua.c')

